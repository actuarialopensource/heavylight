{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>Heavylight is a lightweight Python library that allows you to run heavy modeling workloads using a familiar recursive syntax.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install heavylight\n</code></pre> <p>Requires Python 3.8+</p>"},{"location":"#quick-example","title":"Quick example","text":"<p>Models are defined by subclassing from <code>heavylight.Model</code></p> <pre><code>import numpy as np\nimport heavylight\n\nclass SimpleModel(heavylight.Model):\n\n    def __init__(self, initial_pols_if: np.ndarray, mortality_rate: float):\n        # storage_function determines what gets stored in the results DataFrame\n        super().__init__(storage_function=lambda results: np.round(np.sum(results), 3)) # customize how you aggregate results\n        self.initial_pols_if = initial_pols_if\n        self.mortality_rate = mortality_rate\n\n    def t(self, t):\n        return t\n\n    def num_pols_if(self, t):\n        if t == 0:\n            return self.initial_pols_if\n        return self.num_pols_if(t - 1) - self.pols_death(t - 1) # causes exponential time complexity if uncached\n\n    def pols_death(self, t):\n        return self.num_pols_if(t) * self.mortality_rate\n\n    def cashflow(self, t):\n        return self.num_pols_if(t) * 100\n\n    def v(self, t):\n        if t == 0:\n            return 1\n        return self.v(t - 1) / (1 + self.forward_rate(t))\n\n    def forward_rate(self, t):\n        return 0.04\n\n    def pv_cashflow(self, t):\n        return self.cashflow(t) * self.v(t)\n\n# start with 10 policies and constant mortality rate of .01\nsimple_model = SimpleModel(initial_pols_if=np.ones((10,)), mortality_rate=.01)\n# run the model for 5 timesteps\nsimple_model.RunModel(proj_len=5)\n# create a dataframe to store results\nresults = simple_model.ToDataFrame()\n</code></pre> <p>Results are a Pandas dataframe:</p> t num_pols_if cashflow forward_rate pols_death v pv_cashflow 0 10 1000 0.04 0.1 1 1000 1 9.9 990 0.04 0.099 0.962 951.923 2 9.801 980.1 0.04 0.098 0.925 906.158 3 9.703 970.299 0.04 0.097 0.889 862.592 4 9.606 960.596 0.04 0.096 0.855 821.121 5 9.51 950.99 0.04 0.095 0.822 781.645"}]}